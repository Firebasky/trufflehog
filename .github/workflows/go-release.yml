name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
      fail-fast: false

    if: contains(github.event.head_commit.message, 'build')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.23'

      - name: Get current timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output_name="trufflehog-${{ env.GOOS }}-${{ env.GOARCH }}-${{ steps.timestamp.outputs.TIMESTAMP }}"
          go build -ldflags "-w -s" -o "${output_name}" .
          echo "OUTPUT_FILE=${output_name}" >> "$GITHUB_ENV"
          echo "BUILD_TIMESTAMP=${{ steps.timestamp.outputs.TIMESTAMP }}" >> "$GITHUB_ENV"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "build-output-${{ github.run_id }}-${{ env.GOOS }}-${{ env.GOARCH }}-${{ env.BUILD_TIMESTAMP }}"
          path: ${{ env.OUTPUT_FILE }}
          if-no-files-found: error

    outputs:
      timestamp: ${{ steps.timestamp.outputs.TIMESTAMP }}

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'build')

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Check Artifacts
        run: ls -l release-assets # 检查是否正确下载了 artifacts

      - name: Set Release Tag
        run: echo "RELEASE_TAG=v-${{ needs.build-and-release.outputs.timestamp }}" >> "$GITHUB_ENV"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ needs.build-and-release.outputs.timestamp }}
          files: release-assets/*
          draft: false # 确保这是一个正式发布
