name: Build and Release

on:
  push:
    branches:
      - main #

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
      fail-fast: false # 如果某个构建失败，不阻止其他构建继续

    if: contains(github.event.head_commit.message, 'build')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.23' # 根据你的 Go 版本修改

      - name: Get current timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Build
        run: |
          GOOS=${{ matrix.goos }}
          GOARCH=${{ matrix.goarch }}
          output_name="trufflehog-${{ matrix.goos }}-${{ matrix.goarch }}-${{ steps.timestamp.outputs.TIMESTAMP }}" # 替换为你的项目名称
          go build -ldflags "-w -s" -o "${output_name}" .
          echo "OUTPUT_FILE=${output_name}" >> "$GITHUB_ENV"
          echo "BUILD_TIMESTAMP=${{ steps.timestamp.outputs.TIMESTAMP }}" >> "$GITHUB_ENV" # 将每个构建的时间戳也设置为环境变量

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ env.BUILD_TIMESTAMP }}-${{ matrix.goos }}-${{ matrix.goarch }} # 修改 Artifact 名称，包含更多信息
          path: ${{ env.OUTPUT_FILE }}
          if-no-files-found: error

    outputs:
      timestamp: ${{ steps.timestamp.outputs.TIMESTAMP }} # 保留一个全局的时间戳，用于 Release 标签

  create-release:
    needs: build-and-release # Depends on the build job
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'build')

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-output-* # 下载所有以 build-output- 开头的 Artifacts
          path: release-assets

      - name: Set Release Tag
        run: echo "RELEASE_TAG=v-${{ needs.build-and-release.outputs.timestamp }}" >> "$GITHUB_ENV" # 使用 build 任务的全局时间戳

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v-${{ needs.build-and-release.outputs.timestamp }}
          release_name: Release ${{ needs.build-and-release.outputs.timestamp }}
          files: release-assets/* # Upload all files in the release-assets directory