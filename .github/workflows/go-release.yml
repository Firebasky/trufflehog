name: Go Build and Release

on:
  push:
    branches:
      - main   # 可以改为你的主分支名，如 master 或其他

jobs:
  build-and-release:
    if: contains(github.event.head_commit.message, 'build')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'  # 根据需要修改版本

      - name: Get version from git tag
        id: version
        run: |
          echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build binaries in parallel
        id: build
        uses: actions/github-script@v6
        with:
          script: |
            const builds = [
              { os: "linux", arch: "amd64" },
              { os: "darwin", arch: "amd64" },
              { os: "windows", arch: "amd64" },
            ];
            core.setOutput("builds", JSON.stringify(builds));
            return builds;

      - name: Build each GOOS-GOARCH
        strategy:
          matrix:
            platform: ${{ fromJson(steps.build-platforms.outputs.platforms) }}
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Set up Go
            uses: actions/setup-go@v4
            with:
              go-version: '1.21'

          - name: Build for ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
            run: |
              export GOOS=${{ matrix.platform.os }}
              export GOARCH=${{ matrix.platform.arch }}
              BINARY_NAME=myapp-${GOOS}-${GOARCH}
              if [ "$GOOS" = "windows" ]; then
                BINARY_NAME=$BINARY_NAME.exe
              fi
              go build -o dist/$BINARY_NAME
              echo "Built: $BINARY_NAME"

      - name: Archive binaries
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create Release and Upload Binaries
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.TAG }}
          draft: false
          prerelease: false
          files: dist/*